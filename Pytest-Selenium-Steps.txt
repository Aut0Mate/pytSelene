1. Install pip

& python -m pip install --upgrade pip

2. Install pipenv (While pip alone is often sufficient for personal use, 
Pipenv is recommended for collaborative projects as it’s a higher-level tool that simplifies dependency management for common use cases.)

$ pip install pipenv

3. Create a Project directory (vts_auto)

$ mkdir vts_auto

you can also have Pipenv stick the virtualenv in project/.venv by setting the PIPENV_VENV_IN_PROJECT environment variable.

$ export PIPENV_VENV_IN_PROJECT=1

4. Install the pytest module in this directory - Alternatively you can start the pipenv shell (which will create your vertualenv if not alredy created)

cd DependencyMgntDemoProject
$ pipenv shell (Optional)
$ pipenv install pytest


Pipenv will install the pytest library and create a Pipfile for you in your project’s directory. 
The Pipfile is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others. 
You’ll notice that two files get created, a Pipfile and Pipfile.lock. 

5. Install other packages:
selene (Selenide alternative), pytest-html plugin  for html report, pillow for "image" file handling api (needed for full page screenshot)
openpyxl for reading excel files, selenium-wire for capturing driver requests


$ pipenv install selene --pre
$ pipenv instal pytest-html
$ pipenv install pillow
$ pipenv install openpyxl
$ pipenv install selenium-wire

$ pipenv graph

openpyxl==2.6.0
  - et-xmlfile [required: Any, installed: 1.0.1]
  - jdcal [required: Any, installed: 1.4]
Pillow==5.4.1
pytest-html==1.20.0
  - pytest [required: >=3.0, installed: 4.2.1]
    - atomicwrites [required: >=1.0, installed: 1.3.0]
    - attrs [required: >=17.4.0, installed: 18.2.0]
    - colorama [required: Any, installed: 0.4.1]
    - more-itertools [required: >=4.0.0, installed: 6.0.0]
    - pluggy [required: >=0.7, installed: 0.8.1]
    - py [required: >=1.5.0, installed: 1.7.0]
    - setuptools [required: Any, installed: 40.6.3]
    - six [required: >=1.10.0, installed: 1.12.0]
  - pytest-metadata [required: Any, installed: 1.8.0]
    - pytest [required: >=2.9.0, installed: 4.2.1]
      - atomicwrites [required: >=1.0, installed: 1.3.0]
      - attrs [required: >=17.4.0, installed: 18.2.0]
      - colorama [required: Any, installed: 0.4.1]
      - more-itertools [required: >=4.0.0, installed: 6.0.0]
      - pluggy [required: >=0.7, installed: 0.8.1]
      - py [required: >=1.5.0, installed: 1.7.0]
      - setuptools [required: Any, installed: 40.6.3]
      - six [required: >=1.10.0, installed: 1.12.0]
selene==1.0.0a13
  - backports.functools-lru-cache [required: Any, installed: 1.5]
  - future [required: Any, installed: 0.17.1]
  - selenium [required: Any, installed: 3.141.0]
    - urllib3 [required: Any, installed: 1.24.1]
  - six [required: Any, installed: 1.12.0]
  - webdriver-manager [required: Any, installed: 1.7]
    - configparser [required: Any, installed: 3.7.1]
    - crayons [required: Any, installed: 0.1.2]
      - colorama [required: Any, installed: 0.4.1]
    - requests [required: Any, installed: 2.21.0]
      - certifi [required: >=2017.4.17, installed: 2018.11.29]
      - chardet [required: >=3.0.2,<3.1.0, installed: 3.0.4]
      - idna [required: >=2.5,<2.9, installed: 2.8]
      - urllib3 [required: >=1.21.1,<1.25, installed: 1.24.1]
selenium-wire==1.0.1
  - selenium [required: >=3.4.0, installed: 3.141.0]
    - urllib3 [required: Any, installed: 1.24.1]
-----------------------------------------------  SKIP TO 11 IF YOU DONT WANT TO DEPLOY IN PRODUCTION  ------------------------------------------------------------

6. Okay, so let’s say you’ve got everything working in your local development environment and you’re ready to push it to production. 
To do that, you need to lock your environment so you can ensure you have the same one in production:

$ pipenv lock

This will create/update your Pipfile.lock, which you’ll never need to (and are never meant to) edit manually. 
You should always use the generated file.

7. Now, once you get your code and Pipfile.lock in your production environment, you should install the last successful environment recorded:

$ pipenv install --ignore-pipfile

This tells Pipenv to ignore the Pipfile for installation and use what’s in the Pipfile.lock. Given this Pipfile.lock, Pipenv will create the exact same environment 
you had when you ran pipenv lock, sub-dependencies and all.

The lock file enables deterministic builds by taking a snapshot of all the versions of packages in an environment (similar to the result of a pip freeze).

Now let’s say another developer wants to make some additions to your code. In this situation, they would get the code, including the Pipfile, and use this command:

$ pipenv install --dev

7. This installs all the dependencies needed for development, which includes both the regular dependencies and those you specified with the --dev argument during install.
When an exact version isn’t specified in the Pipfile, the install command gives the opportunity for dependencies (and sub-dependencies) to update their versions.

8. You can run a command in the virtual environment without launching a shell:

$ pipenv run <insert command here>

Check for security vulnerabilities (and PEP 508 requirements) in your environment:

$ pipenv check

Now, let’s say you no longer need a package. You can uninstall it:

$ pipenv uninstall numpy

Additionally, let’s say you want to completely wipe all the installed packages from your virtual environment:

$ pipenv uninstall --all

You can replace --all with --all-dev to just remove dev packages.

9. Quick commands to find out where stuff is. How to find out where your virtual environment is:

$ pipenv --venv
How to find out where your project home is:

$ pipenv --where

10. To remove the environment, you can run the pipenv command with the --rm option as in:

$ pipenv --rm

This will remove the virtualenv created for you under ~/.virtualenvs

See https://docs.pipenv.org/#cmdoption-pipenv-rm
---------------------------------------------------------------------------------------------------------------------------------------

11. Now in your project dir, create the following directories:
configurations - for logging.ini and any other configs
drivers - for driver files in case
logs
page_objects
reports
test_data
test_suites
tests
utils
     - driver_utils
	 - general_utils
	 

mkdir configurations

mkdir drivers

mkdir logs

mkdir page_objects

mkdir reports

mkdir test_data

mkdir test_suites

mkdir tests

mkdir utils

mkdir utils/driver_utils

mkdir utils/general_utils

12. Open the project in PyCharm Community Editon

13. Create conftest.py under project folder. Any fixtures you want to share across the project should be in this file.

14. Create definitions.py to define all the project directory paths as constants.

SAMPLE definitions.py:
# All Project directory paths are listed here as constants
from os.path import join as stitch
import os
import sys

# Add Current Working Directory to sys.path
sys.path.append(os.getcwd())

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))  # Project Root
DRIVERS_DIR = stitch(ROOT_DIR, 'drivers')
CONFIGS_DIR = stitch(ROOT_DIR, 'configurations')
LOGGING_CONFIG_FILE = stitch(CONFIGS_DIR, 'logging.ini')
LOGS_DIR = stitch(ROOT_DIR, 'logs')
LOG_FILE = stitch(LOGS_DIR, 'selenium.log')
TEST_DATA_DIR = stitch(ROOT_DIR, 'test_data')
TESTS_DIR = stitch(ROOT_DIR, 'tests')
TESTS_DIR_REL = '../tests/'
TEST_SUITES_DIR = stitch(ROOT_DIR, 'test_suites')
REPORTS_DIR = stitch(ROOT_DIR, 'reports')
REPORTS_DIR_REL = '../reports/'
SCREENSHOTS_DIR = stitch(ROOT_DIR, 'screenshots')

15. In the configurations folder create the logging.ini.
In logfileHandler, the log file path is set to just selenium.log. This will create a log file in the directory where your program runs.
But pytest can be ran from any directory and we want the log file to be in the logs directory. To keep our project portable we cannot
hard-code the log file path in the ini file. We will write code to build the path and add to logging.ini at runtime.

SAMPLE logging.ini:
[loggers]
keys = root

[handlers]
keys = consoleHandler,logfileHandler

[formatters]
keys = simpleFormatter

[logger_root]
level = INFO
handlers = consoleHandler,logfileHandler

[handler_consoleHandler]
class = StreamHandler
level = DEBUG
formatter = simpleFormatter
args = (sys.stdout,)

[handler_logfileHandler]
class = FileHandler
level = DEBUG
formatter = simpleFormatter
args = ('selenium.log', 'w')

[formatter_simpleFormatter]
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt = 

16. Create logger.py in ~/utils/general_utils with following code which makes the Logger singleton 
and also writes the log file path to logging.ini:

import logging
import os
from configparser import ConfigParser
from logging.config import fileConfig

from definitions import LOGGING_CONFIG_FILE, LOG_FILE


class Logger:

    __instance = None

    def __new__(cls, val):
        if Logger.__instance is None:
            Logger.__instance = object.__new__(cls)
            Logger.__instance.val = val
            config = ConfigParser()
            config.read(LOGGING_CONFIG_FILE)
            # writing the 'path to log file' on the fly, to logging.ini since pytest can run from anywhere in the
            # project.
            # putting '../logs/selenium.log' in ini will create 'path not found' exception if pytest not run from root
            # folder
            # hence adding the calculated Logfile path to logging.ini

            # If the 'path to log file' contains '\v' then it is getting converted to 'x0b' when fileConfig is parsing
            # it and raising an exception
            # so need to escape it
            if r'\v' in LOG_FILE:
                path = LOG_FILE.replace(r'\v', r'\\v')
            else:
                path = LOG_FILE
            config['handler_logfileHandler']['args'] = "('" + path + "', 'w')"

            # writing to logging.ini
            with open(LOGGING_CONFIG_FILE, 'w') as configfile:
                config.write(configfile)

            # parse the logging.ini config
            fileConfig(LOGGING_CONFIG_FILE)
        cls.log = logging.getLogger(os.path.basename(val))
        return Logger.__instance


17. Create a init_driver.py in ~/utils/driver_utils and add the Init_driver and quit driver methods; Driver is created from seleniumwire rather than selenium
and the driver instance is assigned to selene driver so that its accessible at all time throgh selene api

from selene import browser
from selene.browsers import BrowserName
from seleniumwire import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager

from utils.general_utils.logger import Logger

driver: webdriver = None
log = Logger(__file__).log


def initialize_driver(b=BrowserName.CHROME):
    global driver

    if not driver:
        log.info("Driver is None. Initializing [{}] driver".format(b) )
        if b == BrowserName.CHROME:
            driver = webdriver.Chrome(executable_path=ChromeDriverManager().install())
        elif b == BrowserName.FIREFOX:
            driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())
        else:
            raise Exception("Invalid Browser Name provided")
    log.info("Setting Selene driver")
    browser.set_driver(driver)
    driver.maximize_window()
    return driver


def quit_driver():
    global driver
    log.info("Quitting the driver")
    driver.quit()
    driver = None
    log.info("Driver is None")

18. Now in the conftest.py add a fixture to use driver and quit driver after use.
We wil make this fixture with the scope "session" so it will be called only once b4 the tests start
and the driver will be avilable to all tests as long as the session in active. we will also make it auto-usable so you don't have to pass the
fixture parameter in the test method.

import pytest

from utils.driver_utils.init_driver import initialize_driver, quit_driver


@pytest.fixture(scope="session", autouse=True)
def driver():
    yield initialize_driver()
    quit_driver()

19. Now create a test file under the tests folder: /tests/test_titles and add tests
to check the title of google and quora websites. When the test starts the driver is initialized by the autouse fixture
in conftest.py and the driver is available to us via selene as we set the selene driver in that method.

from selene import browser


def test_google_title():
    browser.open_url("http://www.google.com")
    assert 'Google' in browser.title()


def test_quora_title():
    browser.open_url("https://www.quora.com/")
    assert 'Quora' in browser.title()


def test_wiki_title():
    browser.open_url("https://www.wikipedia.com/")
    assert 'wiki' in browser.title()

20. Your basic setup is now ready. Just go and run the py.test command on the project:

$ pipenv run py.test -v --capture=no --html=report.html

This will run the tests, create a log file in the logs dir and create report.html in the project dir. Check the report.html and delete it for now

21. Now we need some logging before a test starts and after it ends. So lets add another autouse fixture in conftest.py. We also need to determine and log the test result.
For that we need an attribute (report_call.outcome) available in request.node. This atribute is set in the pytest_runtest_makereport(item, call) hookwrapper method:

@pytest.fixture(scope="function", autouse=True)
def log_test_details(request):
    """
    Adds loggers to mark start and end of a test
    :param request:
    :return:
    """
    text = " Starting test [" + request.node.name + "] "
    log.info(text.center(61, "="))
    yield
    if request.node.report_call.failed:
        pass
    elif request.node.report_call.passed:
        pass
    elif request.node.report_call.skipped:
        pass
    else:
        pass
    log.info(">>>>>>>>>>>>>>>>>>>>>>>>> " + request.node.report_call.outcome + " <<<<<<<<<<<<<<<<<<<<<<<<<")
    log.info(" [{}] {} ".format(request.node.name, request.node.report_call.outcome).upper().center(61, "="))
    log.info("")
	
@pytest.mark.hookwrapper
def pytest_runtest_makereport(item, call):
    outcome = yield
    report = outcome.get_result()
    # setting the attribute so that it can be accessed from all fixtures. refer to the fixture log_test_details()
    setattr(item, "report_" + report.when, report)
	
22. Lets add some useful general utility methods in utils/general_utils/gen_utils.py:

import os
import time
from time import sleep

from PIL import Image
from selene import browser
from selene.conditions import exist
from selene.support.jquery_style_selectors import s
from selenium.webdriver.common.by import By

from definitions import SCREENSHOTS_DIR, TESTS_DIR
from utils.general_utils.logger import Logger

log = Logger(__file__).log


def wait(time_to_wait: float=0.5):
    """
    Calls the time.sleep() for provided time_to_wait
    :param time_to_wait:
    :return:
    """
    sleep(time_to_wait)


def is_element_present(locator: By, time_to_wait=2):
    """
    Check if an elemnt is present in the dom
    :param locator:
    :param time_to_wait:
    :return:
    """
    try:
        s(locator).should(exist, time_to_wait)
        return True
    except Exception as e:
        log.info(">>>> ", e)
        return False


def capture_screenshot(filename: str):
    """
    Captures screen-shot with the provided filename and puts in the screenshots directory under reports directory
    :param filename:
    :return:
    """
    log.info("Capturing failure screenshot " + filename)
    browser.take_screenshot(path=SCREENSHOTS_DIR, filename=filename)
    return True


def get_test_file_path(test_file: str):
    """
    Returns absolute path to the test_file
    :param test_file:
    :return:
    """
    return os.path.join(TESTS_DIR, test_file)


def take_full_page_screenshot(filename: str):
    """
    Takes the screen-shot of the entire WebPage and saves with the filename passed as argument
    :param filename:
    :return:
    """
    log.debug("Starting the full page screen-shot utility...")
    total_width = browser.execute_script("return document.body.offsetWidth")
    total_height = browser.execute_script("return document.body.parentNode.scrollHeight")
    viewport_width = browser.execute_script("return document.body.clientWidth")
    viewport_height = browser.execute_script("return window.innerHeight")
    log.debug("Total: ({}, {}), Viewport: ({}, {})".format(total_width, total_height, viewport_width, viewport_height))

    browser.execute_script("window.scrollTo(0, 0)")
    patches = []

    captured_height = 0
    while captured_height < total_height:
        captured_width = 0
        current_height = captured_height + viewport_height

        if current_height > total_height:
            current_height = total_height

        while captured_width < total_width:
            current_width = captured_width + viewport_width

            if current_width > total_width:
                current_width = total_width

            log.debug("Appending to the patches ({}, {}, {}, {})".format(captured_width, captured_height, current_width,
                                                                         current_height))
            patches.append((captured_width, captured_height, current_width, current_height))

            captured_width += viewport_width

        captured_height += viewport_height

    final_image = Image.new('RGB', (total_width, total_height))
    previous = None
    part = 0

    for patch in patches:
        if previous:
            browser.execute_script("window.scrollTo({0}, {1})".format(patch[0], patch[1]))
            log.debug("Scrolled to {}, {}".format(patch[0], patch[1]))
            time.sleep(0.2)

        file_name = "part_{}.png".format(part)
        log.info("Capturing {} ...".format(file_name))

        browser.take_screenshot(path=SCREENSHOTS_DIR, filename=file_name[:-4])
        file_name = os.path.join(SCREENSHOTS_DIR, file_name)
        screen_shot = Image.open(file_name)

        if patch[1] + viewport_height > total_height:
            offset = (patch[0], total_height - viewport_height)
        else:
            offset = (patch[0], patch[1])

        log.debug("Adding to stitched image with offset ({0}, {1})".format(offset[0], offset[1]))
        final_image.paste(screen_shot, offset)

        del screen_shot

        os.remove(file_name)
        part += 1
        previous = patch

    final_image.save(os.path.join(SCREENSHOTS_DIR, filename))
    log.debug("Full page screen_shot workaround complete...")
    return True


class SoftAssert:

    """
    This is an attempt to implement soft assert (verify), since it is not available in pytest.

    using soft assert class methods the script execution will not stop on an assert failure, instead will be added to
    the failures list.

    In the end the assert_all method can be used to assert the list with an empty list
    """

    def __init__(self):
        self._errors = []

    def assert_equals(self, actual, expected, failure_message=None):
        """
        Soft assert if 2 objects are equal
        :param actual:
        :param expected:
        :param failure_message:
        :return:
        """
        if not failure_message:
            failure_message = "Expected [%s] but found [%s]" % (expected, actual)
        if actual != expected:
            self._errors.append("[%s != %s]. " % (actual, expected) + failure_message)

    def assert_true(self, expression, failure_message):
        """
        Soft assert if the expression is True
        :param expression:
        :param failure_message:
        :return:
        """
        if not expression:
            self._errors.append(failure_message)

    def assert_all(self):
        """
        Assert all soft asserts
        :return:
        """
        assert self._errors == [], '\n' + ('\n'.join(self._errors))


23. Add more fixtures, one including to take screenshot and add to the pytest-html report:

import pytest
import os
from selene import browser

from definitions import SCREENSHOTS_DIR
from utils.driver_utils.init_driver import initialize_driver, quit_driver
from utils.general_utils.gen_utils import take_full_page_screenshot, capture_screenshot
from utils.general_utils.logger import Logger

log = Logger(__file__).log


@pytest.fixture(scope='function', autouse=True)
def refresh_page():
    """
    Teardown fixture to refresh the page
    :return:
    """
    yield
    log.info("Refreshing page...")
    browser.driver().refresh()
    log.info("...Done")


@pytest.mark.hookwrapper
def pytest_runtest_makereport(item, call):
    """
    Extends the pytest plugin to take screenshot and embed in the html report when a test fails
    :param item:
    :return:
    """
    pytest_html = item.config.pluginmanager.getplugin('html')
    outcome = yield
    report = outcome.get_result()
    # setting the attribute so that it can be accessed from all fixtures. refer to the fixture log_test_details()
    setattr(item, "report_" + report.when, report)
    extra = getattr(report, 'extra', [])
    if report.when == 'call' or report.when == 'setup':
        xfail =hasattr(report, 'wasxfail')
        if (report.skipped and xfail) or (report.failed and not xfail):
            file_name = report.nodeid.replace("::", "_")
            file_name = file_name.replace(".py", "_")
            # when the teh command "python test\test_titles.py" is run from the root folder,
            # the report.nodeid is 'test\test_titles.py' instead of 'test_titles.py'
            # This causes the screenshots to be stored in a tests directory under screenshots directory
            # Hence we replace the '/' or '\' by a '_'
            # so that file_name is 'tests_test_titles' instead of 'tests\test_titles'
            file_name = file_name.replace("/", "_")
            file_name = file_name.replace("\\", "_")
            print(":::::::::::::::::::::::::::::::::::::::::::")
            print(file_name)
            print(":::::::::::::::::::::::::::::::::::::::::::")
            if not os.path.exists(SCREENSHOTS_DIR):
                os.mkdir(SCREENSHOTS_DIR, mode=0o777)
            try:
                take_full_page_screenshot(file_name + ".png")
            except Exception as e:
                log.info(e)
                log.info("FAILED TO TAKE FULL SCREEN SHOT")
                capture_screenshot(file_name)
            if file_name:
                html = '<div><img src="%s" alt="screenshot" style="width:304px;height:228px;" ' \
                       'onclick="window.open(this.src)" align="right"/></div>' % os.path.join('screenshots',
                                                                                              file_name + '.png')
                extra.append(pytest_html.extras.html(html))
        report.extra = extra


24. we will Add __init__.py to the project dir to suppress selenium-wire logs and resolve the issue of "module no found" by adding the project dir to sys.path
irrespective of in whichever dir the py.test command is run. Also if we are going to run the test files directly from any dir, we need to add the __init__.py in
the /tests and /test_suites directories and add the statement "from __init__ import *" to all the test and test_suite files.
EXAMPLE: __init__.py

import os
import logging
from pathlib import Path

import sys

# Adding root dir to sys.path to avoid "module not found" when pytest is run from any sub directory of
# the root directory example
# (vts_auto)  C:\PycharmProjects\vts_auto\tests\temp_test> pytest

PROJECT_NAME = "vts_auto"

# To suppress selenium-wire logs
logging.getLogger("seleniumwire.proxy.handler").setLevel(logging.WARNING)

p = Path(os.getcwd())

if not str(p).endswith(PROJECT_NAME):  # when pytest is run from roots subdirectories
    for path in p.parents:
        if str(path).endswith(PROJECT_NAME):
            if str(path) not in sys.path: sys.path.insert(0, str(path))
            break
else:
    if str(p) not in sys.path: sys.path.insert(0, str(p))

for path in sys.path:
    print(path)


25. Now we can add excel_utils.py to ~/utils/general_utils/ which will have methods to read test data from excel as required by the
@pytest.mark.parametrize fixture;

from openpyxl import load_workbook


def get_all_rows_from_excel(file: str, work_sheet: str):
    """
    Gets all the rows, including the 1st Header row, from an excel worksheet
    :param file:
    :param work_sheet:
    :return: list of tuples containing cell values
    """
    wb = load_workbook(filename=file)
    ws = wb[work_sheet]
    all_rows = []
    for row in range(1, ws.max_row + 1):
        row_data = []
        for col in range(1, ws.max_column + 1):
            row_data.append(ws.cell(row, col).value)
        all_rows.append(tuple(row_data))

    return all_rows


def get_data_from_excel_for_parameterize(file: str, work_sheet: str):
    """
    Returns the data from excel as a tuple of size 2 containing a tuple of headers and List of tuples(rows fom excel)
    :param file:
    :param work_sheet:
    :return: Tuple[Tuple, List[ANY]]
    """
    all_rows = get_all_rows_from_excel(file=file, work_sheet=work_sheet)
    headers = ",".join(all_rows[0])
    data = all_rows[1:]
    return headers, data

26. Add page objects in page_object dir:

Example: new_tours_home_page.py

from selene.bys import by_link_text
from selene.support.conditions.have import attribute
from selene.support.jquery_style_selectors import s
from selenium.webdriver.support.select import Select

from utils.general_utils.logger import Logger

log = Logger(__file__).log


def click_register_link():
    s(by_link_text("REGISTER")).click()
    s("title").should_have(attribute('text', 'Register: Mercury Tours'), 10)


def enter_first_name(first_name: str):
    s("input[name='firstName']").clear().send_keys(first_name)


def enter_last_name(last_name: str):
    s("input[name='lastName']").clear().send_keys(last_name)


def enter_phone(number: str):
    s("input[name='phone']").clear().send_keys(number)


def enter_email(email: str):
    s("input[name='userName']").clear().send_keys(email)


def enter_mailing_address_line1(address: str):
    s("input[name='address1']").clear().send_keys(address)


def enter_mailing_address_line2(address: str):
    s("input[name='address2']").clear().send_keys(address)


def enter_city(city: str):
    s("input[name='city']").clear().send_keys(city)


def enter_state_or_province(state: str):
    s("input[name='state']").clear().send_keys(state)


def enter_postal_code(postal_code: str):
    s("input[name='postalCode']").clear().send_keys(postal_code)


def select_country(country: str):
    Select(s("select[name='country']")).select_by_visible_text(country.upper())


def enter_user_name(user_name: str):
    s("input[name='email']").clear().send_keys(user_name)


def enter_password(password: str):
    s("input[name='password']").set_value(password)


def enter_in_confirm_password(password: str):
    s("input[name = 'confirmPassword']").set_value(password)


def click_submit():
    s("input[name = 'register']").scroll_to().click()


def register_user(f_name, l_name, number, email, address1, address2, city, state, postal_code, country, user_name,
                  password, confirm_password):
    enter_first_name(first_name=f_name)
    enter_last_name(last_name=l_name)
    enter_phone(number=number)
    enter_email(email=email)
    enter_mailing_address_line1(address=address1)
    enter_mailing_address_line2(address=address2)
    enter_city(city=city)
    enter_state_or_province(state=state)
    enter_postal_code(postal_code=postal_code)
    select_country(country=country)
    enter_user_name(user_name=user_name)
    enter_password(password=password)
    enter_in_confirm_password(password=confirm_password)
    click_submit()

Example: pt_home_page.py

from selene import browser
from selene.bys import by_xpath
from selene.support.jquery_style_selectors import s
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait


def click_blog_link():
    s(by_xpath("//a[normalize-space(.)='Blog']")).click()
    WebDriverWait(browser.driver(), 10).until(expected_conditions.title_contains('Blog'))


def click_home_link():
    s(by_xpath("//a[normalize-space(.)='Home']")).click()
    WebDriverWait(browser.driver(), 10).until(expected_conditions.title_contains('PHPTRAVELS'))

27. Add a test data excel in the test_data dir:

Example: test_data.xlsx

first_name	last_name	phone	email	address1	address2	city	state	postal_code	country	user_name	password	confirm_password
Ketan	Ina	9833880808	abc@khop.com	H5, Haveli	MG Road	Pune	Maharashtra	411033	INDIA	dama	peeka	peeka
Vineet	Meena	9823547654	fds@khop.com	Block 16, Meher	SB Road	Pune	Maharashtra	411023	INDIA	maka	rola	rola
Rani	Deeka	9854323321	jhg@khop.com	3A/15, National Colony	New Friends	Pune	Maharashtra	411021	INDIA	neko	dika	dika
Jayada	Dey	9878675645	ghf@khop.com	F1/12/ New Bakers	Nanapeth	Pune	Maharashtra	411038	INDIA	cheeka	rum	rum


28. In the tests folder, Add test that use the excel data to run data driven tests.
Also in the main method we can add code to run pytest with the required flags to create appropiate report.
Example: ~/tests/test_new_tours.py

import os
import sys

import pytest
from selene import browser
from selene.bys import by_xpath

from definitions import REPORTS_DIR, TESTS_DIR, TEST_DATA_FILE
from page_objects.new_tours_home_page import *
from utils.general_utils.excel_utils import get_data_from_excel_for_parameterize
from utils.general_utils.gen_utils import SoftAssert

test_register_user_args = get_data_from_excel_for_parameterize(TEST_DATA_FILE, "test_register_user")


@pytest.mark.parametrize(test_register_user_args[0], test_register_user_args[1])
def test_register_user(first_name, last_name, phone, email, address1, address2, city, state, postal_code, country,
                       user_name,
                       password, confirm_password):
    browser.open_url("http://newtours.demoaut.com/")
    click_register_link()
    register_user(f_name=first_name, l_name=last_name, number=phone, email=email, address1=address1, address2=address2,
                  city=city, state=state, postal_code=postal_code, country=country, user_name=user_name,
                  password=password, confirm_password=confirm_password)


def test_all_links():
    browser.open_url("http://newtours.demoaut.com/")
    sa = SoftAssert()
    s(by_xpath("//a[.='SIGN-OFF']")).click()
    sa.assert_equals(browser.title(), "Sign-on: Mercury Tours", "The browser title for Sign on page did not match")
    s(by_link_text("SUPPORT")).click()
    sa.assert_equals(browser.title(), "Under Construction: Mercury Tour",
                     "The browser title for Support page did not match")
    s(by_link_text("REGISTER")).click()
    sa.assert_equals(browser.title(), "Register: Mercury Tour",
                     "The browser title for Support page did not match")
    sa.assert_all()


if __name__ == '__main__':
    print('PYTHON PATH: ' + str(sys.path))
    pytest.main(['--html=' + REPORTS_DIR + os.sep + 'test_new_tours_report.html',
                 '--self-contained-html', '-v', '-q', '-s', os.path.join(TESTS_DIR, 'test_new_tours.py')])

29. In the project dir, you can simply run the following command, which will run the tests, and logs and report will be generated in the respective directories.
$ pipenv run python tests/test_new_tours.py

